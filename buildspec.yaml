version: "0.2"
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${IMAGE_REPO_URI}
      - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${STATIC_SITE_REPO_URI}
      - IMAGE_TAG=$(cat version)-$(git describe --always --long)
      - TG_TOKEN=$(aws ssm get-parameter --name "/cryptoeye/telegram_bot_token" --with-decryption --query Parameter.Value --output text)
      - TG_CHAT_ID=$(aws ssm get-parameter --name "/cryptoeye/telegram_chat_id" --query Parameter.Value --output text)
      - COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1)
      - GIT_AUTHOR=$(git log -1 --pretty=format:'%an')
      - BUILD_URL="https://console.aws.amazon.com/codesuite/codebuild/projects/${CODEBUILD_BUILD_ID%%:*}/build/${CODEBUILD_BUILD_ID}/"
    on-failure: ABORT
  build:
    commands:
      - echo Building API image ${IMAGE_REPO_URI}:$IMAGE_TAG
      - cd src/api
      - docker build -t ${IMAGE_REPO_URI}:${IMAGE_TAG} .
      - cd ../..
      - echo Building static site image ${STATIC_SITE_REPO_URI}:$IMAGE_TAG
      - cd src/static
      - docker build -t ${STATIC_SITE_REPO_URI}:${IMAGE_TAG} .
      - cd ../..
    on-failure: ABORT
  post_build:
    commands:
      - |
        if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ]; then
          echo "‚úÖ Build succeeded - Pushing images to ECR..."

          # Push API image
          echo "Pushing API image..."
          if docker push ${IMAGE_REPO_URI}:${IMAGE_TAG}; then
            API_PUSH_STATUS="‚úÖ"
            API_PUSH_RESULT="success"
          else
            API_PUSH_STATUS="‚ùå"
            API_PUSH_RESULT="failed"
          fi

          # Push Static Site image
          echo "Pushing Static Site image..."
          if docker push ${STATIC_SITE_REPO_URI}:${IMAGE_TAG}; then
            STATIC_PUSH_STATUS="‚úÖ"
            STATIC_PUSH_RESULT="success"
          else
            STATIC_PUSH_STATUS="‚ùå"
            STATIC_PUSH_RESULT="failed"
          fi

          # Check if both pushes succeeded
          if [ "$API_PUSH_RESULT" = "success" ] && [ "$STATIC_PUSH_RESULT" = "success" ]; then
            echo "‚úÖ All images pushed successfully"
            MSG=$(cat <<EOF
        üöÄ <b>ChainEye Deployment</b>

        ‚úÖ Build and deployment successful!

        <b>Version:</b> <code>${IMAGE_TAG}</code>
        <b>Commit:</b> ${COMMIT_MSG}
        <b>Author:</b> ${GIT_AUTHOR}

        <b>Images:</b>
        ‚Ä¢ API: <code>${IMAGE_REPO_URI##*/}:${IMAGE_TAG}</code> ${API_PUSH_STATUS}
        ‚Ä¢ Static Site: <code>${STATIC_SITE_REPO_URI##*/}:${IMAGE_TAG}</code> ${STATIC_PUSH_STATUS}

        <a href='${BUILD_URL}'>View Build Details</a>
        EOF
            )
            curl -sS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              --data-urlencode "chat_id=${TG_CHAT_ID}" \
              --data-urlencode "text=${MSG}" \
              --data-urlencode "parse_mode=HTML" \
              --data-urlencode "disable_web_page_preview=false"
            echo "{\"api\":\"${IMAGE_REPO_URI}:${IMAGE_TAG}\",\"static_site\":\"${STATIC_SITE_REPO_URI}:${IMAGE_TAG}\",\"status\":\"success\"}" > image-detail.json
          else
            echo "‚ùå Push failed for one or more images"
            MSG=$(cat <<EOF
        üî¥ <b>ChainEye Push Failed</b>

        ‚ùå Failed to push images to ECR

        <b>Version:</b> <code>${IMAGE_TAG}</code>
        <b>Commit:</b> ${COMMIT_MSG}
        <b>Author:</b> ${GIT_AUTHOR}

        <b>Push Status:</b>
        ‚Ä¢ API: ${API_PUSH_STATUS} ${API_PUSH_RESULT}
        ‚Ä¢ Static Site: ${STATIC_PUSH_STATUS} ${STATIC_PUSH_RESULT}

        <a href='${BUILD_URL}'>View Build Logs</a>
        EOF
            )
            curl -sS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              --data-urlencode "chat_id=${TG_CHAT_ID}" \
              --data-urlencode "text=${MSG}" \
              --data-urlencode "parse_mode=HTML" \
              --data-urlencode "disable_web_page_preview=false"
            echo "{\"status\":\"push_failed\",\"api_push\":\"${API_PUSH_RESULT}\",\"static_push\":\"${STATIC_PUSH_RESULT}\"}" > image-detail.json
            exit 1
          fi
        else
          echo "‚ùå Build failed - Sending failure notification..."
          MSG=$(cat <<EOF
        üî¥ <b>ChainEye Build Failed</b>

        ‚ùå Build failed during ${CODEBUILD_BUILD_PHASE}

        <b>Version:</b> <code>${IMAGE_TAG}</code>
        <b>Commit:</b> ${COMMIT_MSG}
        <b>Author:</b> ${GIT_AUTHOR}

        <a href='${BUILD_URL}'>View Build Logs</a>
        EOF
          )
          curl -sS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TG_CHAT_ID}" \
            --data-urlencode "text=${MSG}" \
            --data-urlencode "parse_mode=HTML" \
            --data-urlencode "disable_web_page_preview=false"
          exit 1
        fi

artifacts:
  files:
    - image-detail.json