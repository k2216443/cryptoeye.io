user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # JSON log format
    log_format json_combined escape=json
    '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status":"$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"http_x_forwarded_for":"$http_x_forwarded_for"'
    '}';

    access_log /var/log/nginx/access.log json_combined;

    sendfile on;
    keepalive_timeout 65;
    gzip on;

    # API backend upstream - uses Docker Compose service name
    upstream api_backend {
        server api:8000;
        keepalive 32;
    }

    server {
        listen 8080;
        server_name localhost chaineye.io;

        # Proxy API requests to backend
        location /api/ {
            proxy_pass http://api_backend;
            proxy_http_version 1.1;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support (if needed)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffering
            proxy_buffering off;
            proxy_request_buffering off;
        }

        # Serve evaluate.html for /evaluate/<addr> URLs
        location ~ ^/evaluate/[^/]+$ {
            root /usr/share/nginx/html;
            try_files /evaluate.html =404;
        }

        # Serve static files
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # Serve favicon with caching
        location = /favicon.ico {
            root /usr/share/nginx/html;
            access_log off;
            log_not_found off;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
    }
}
